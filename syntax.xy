/[ \t\r\n]/
/#[^\n]*/
code /code/ {text}
input /input/ {text}
output /output/ {text}
other_contracts /other_contracts/ {text}
amount /amount/ {text}
balance /balance/ {text}
chain_id /chain_id/ {text}
big_maps /big_maps/ {text}
now /now/ {text}
self /self/ {text}
parameter /parameter/ {text}
sender /sender/ {text}
source /source/ {text}
failed /Failed/ {text}
mutezOverflow /MutezOverflow/ {text}
mutezUnderflow /MutezUnderflow/ {text}
generalOverflow /GeneralOverflow/ {text}
tcError /TCError/ {text}
underscore /_/ {text}
typeMismatch /TypeMismatch/ {text}
noMatchingOverload /NoMatchingOverload/ {text}
valueError /ValueError/ {text}
deadCode /DeadCode/ {text}
badType /BadType/ {text}
invalidInstr /InvalidInstr/ {text}
stack_elt /Stack_elt/
semi /;/
colon /:/
comma /,/
lbr  /{/
rbr  /}/
lbrk  /\[/
rbrk  /\]/
lp /\(/ {text}
rp /\)/ {text}
word /[_a-zA-Z0-9\-]+|"([^\\"]|\\.)*"/ { text }

%%

E : Block E_ { [_1].concat(_2) }
  ;

E_ : semi E { _2 }
   | semi %eof { [] }
   | %eof { [] }
   ;

Block : code Seq { {code: _2} }
      | input lbr Stack rbr { {input: _3} }
      | output StackOrErr { {output: _2 } }
      | other_contracts Seq { { other_contracts: _2 } }
      | amount word { {amount: _2} }
      | balance word { {balance: _2} }
      | now word { {now: _2} }
      | chain_id word { {chain_id: _2} }
      | self word { {self: _2} }
      | sender word { {sender: _2} }
      | source word { {source: _2} }
      | parameter Type { {parameter: _2} }
      | big_maps lbr Elts_ rbr { {big_maps: _3} }
      ;

StackOrErr
  : lp Err rp { { err: _2 } }
  | lbr Stack rbr { { stack: _2 } }
  ;

Err
  : failed Value { { class: _1, val: _2 } }
  | mutezOverflow Value Value { { class: _1, i: _2, j: _3 } }
  | mutezUnderflow Value Value { { class: _1, i: _2, j: _3 } }
  | generalOverflow Value Value { { class: _1, i: _2, j: _3 } }
  | tcError TCError { { class: _1, detail: _2 } }
  ;

TCError
  : underscore { null }
  | typeMismatch Type Type { { class: _1, l: _2, r: _3 } }
  | noMatchingOverload word lbrk StackType rbrk { { class: _1, instr: _2, stack: _4 } }
  | valueError Type Value { { class: _1, type: _2, value: _3 } }
  | deadCode word { { class: _1, instr: _2 } }
  | invalidInstr word { { class: _1, instr: _2 } }
  | badType Type { { class: _1, type: _2 } }
  | lp TCError rp { _2 }
  ;

Seq
  : lbr Elts_ rbr { _2.join(" ; ") }
  ;

Elts_
  : Elts semi Elts_ { [_1].concat(_3) }
  | Elts { [_1] }
  | { [] }
  ;

Elts
  : Elt Elts { `${_1} ${_2}` }
  | Elt { _1 }
  ;

Elt
  : AnyWord { _1 }
  | lp Elts rp { `(${_2})` }
  | Seq { _1.length > 0 ? `{ ${_1} }` : "{}" }
  ;

Words
  : AnyWord Words { `${_1} ${_2}` }
  | %non5 AnyWord { _1 }
  ;

AnyWord
  : word { _1 }
  | code { _1 }
  | input { _1 }
  | output { _1 }
  | other_contracts { _1 }
  | amount { _1 }
  | balance { _1 }
  | chain_id { _1 }
  | big_maps { _1 }
  | now { _1 }
  | self { _1 }
  | parameter { _1 }
  | sender { _1 }
  | source { _1 }
  | failed { _1 }
  | mutezOverflow { _1 }
  | mutezUnderflow { _1 }
  | generalOverflow { _1 }
  | tcError { _1 }
  | underscore { _1 }
  | typeMismatch { _1 }
  | noMatchingOverload { _1 }
  | valueError { _1 }
  | deadCode { _1 }
  | badType { _1 }
  | invalidInstr { _1 }
  ;

Stack
  : StackElt semi Stack { [_1].concat(_3) }
  | StackElt { [_1] }
  | { [] }
  ;

StackType
  : PType StackTypeSep StackType { [_1].concat(_3) }
  | PType { [_1] }
  | { [] }
  ;

StackTypeSep
  : comma
  | colon
  ;

StackElt
  : stack_elt Type Value { { type: _2, val: _3 } }
  ;

Type
  : word { _1 }
  | chain_id { _1 }
  | lp PType rp { `(${_2})` }
  ;

PType
  : Type { _1 }
  | Type PType { `${_1} ${_2}` }
  ;

Value
  : word { _1 }
  | underscore { "_" }
  | lp PValue rp { `(${_2})` }
  | Seq { _1.length > 0 ? `{ ${_1} }` : "{}" }
  ;

PValue
  : Value { _1 }
  | Value PValue { `${_1} ${_2}` }
  ;
